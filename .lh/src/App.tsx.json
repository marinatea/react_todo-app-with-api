{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1715350240271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715350249899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { USER_ID, deleteTodo, getTodos, postTodo } from './api/todos';\n import { TodoList } from './Components/TodoList';\n import { ErrorNotification } from './Components/ErrorNotification';\n import { Footer } from './Components/Footer';\n-import { Status, Todo, Error } from './types/Todo';\n+import { Status, Todo, Error } from ;\n \n export const App: React.FC = () => {\n   const [todos, setTodos] = useState<Todo[]>([]);\n   const [error, setError] = useState<boolean>(false);\n@@ -253,5 +253,4 @@\n       />\n     </div>\n   );\n };\n-\n"
                },
                {
                    "date": 1715350255319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { USER_ID, deleteTodo, getTodos, postTodo } from './api/todos';\n import { TodoList } from './Components/TodoList';\n import { ErrorNotification } from './Components/ErrorNotification';\n import { Footer } from './Components/Footer';\n-import { Status, Todo, Error } from ;\n+import { Status, Todo, Error } from './';\n \n export const App: React.FC = () => {\n   const [todos, setTodos] = useState<Todo[]>([]);\n   const [error, setError] = useState<boolean>(false);\n"
                },
                {
                    "date": 1715351233995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { USER_ID, deleteTodo, getTodos, postTodo } from './api/todos';\n import { TodoList } from './Components/TodoList';\n import { ErrorNotification } from './Components/ErrorNotification';\n import { Footer } from './Components/Footer';\n-import { Status, Todo, Error } from './';\n+import { Status, Todo, Error } from './Types/Todo';\n \n export const App: React.FC = () => {\n   const [todos, setTodos] = useState<Todo[]>([]);\n   const [error, setError] = useState<boolean>(false);\n@@ -155,8 +155,9 @@\n \n   const handleToggleTodo = async (id: number) => {\n     setLoadingTodoId(id);\n     try {\n+      aw\n       setTodos(prev =>\n         prev.map(todo =>\n           todo.id === id ? { ...todo, completed: !todo.completed } : todo,\n         ),\n"
                },
                {
                    "date": 1715351243095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n \n   const handleToggleTodo = async (id: number) => {\n     setLoadingTodoId(id);\n     try {\n-      aw\n+      await postTodo\n       setTodos(prev =>\n         prev.map(todo =>\n           todo.id === id ? { ...todo, completed: !todo.completed } : todo,\n         ),\n"
                },
                {
                    "date": 1715351295972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,8 @@\n \n   const handleToggleTodo = async (id: number) => {\n     setLoadingTodoId(id);\n     try {\n-      await postTodo\n       setTodos(prev =>\n         prev.map(todo =>\n           todo.id === id ? { ...todo, completed: !todo.completed } : todo,\n         ),\n"
                },
                {
                    "date": 1715351666869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n         setTodos(todosData);\n       } catch (err) {\n         setError(true);\n-        setErrorType('load');\n+        setErrorType('up');\n       }\n     };\n \n     fetchTodos();\n"
                },
                {
                    "date": 1715351967782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n         setTodos(todosData);\n       } catch (err) {\n         setError(true);\n-        setErrorType('up');\n+        setErrorType('update');\n       }\n     };\n \n     fetchTodos();\n@@ -170,8 +170,9 @@\n   };\n \n   const handleToggleAllTodos = () => {\n     const allCompleted = todos.every(todo => todo.completed);\n+    n\n \n     setTodos(prev =>\n       prev.map(todo => ({\n         ...todo,\n"
                },
                {
                    "date": 1715351973402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n   };\n \n   const handleToggleAllTodos = () => {\n     const allCompleted = todos.every(todo => todo.completed);\n-    n\n+    const newStt\n \n     setTodos(prev =>\n       prev.map(todo => ({\n         ...todo,\n"
                },
                {
                    "date": 1715351980115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,10 +170,11 @@\n   };\n \n   const handleToggleAllTodos = () => {\n     const allCompleted = todos.every(todo => todo.completed);\n-    const newStt\n+    const newSttus = \n \n+\n     setTodos(prev =>\n       prev.map(todo => ({\n         ...todo,\n         completed: !allCompleted,\n"
                },
                {
                    "date": 1715351985308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n   };\n \n   const handleToggleAllTodos = () => {\n     const allCompleted = todos.every(todo => todo.completed);\n-    const newSttus = \n+    const newSttus = !all\n \n \n     setTodos(prev =>\n       prev.map(todo => ({\n"
                },
                {
                    "date": 1715351996436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,11 +170,10 @@\n   };\n \n   const handleToggleAllTodos = () => {\n     const allCompleted = todos.every(todo => todo.completed);\n-    const newSttus = !all\n+    const newStatus = !allCompleted;\n \n-\n     setTodos(prev =>\n       prev.map(todo => ({\n         ...todo,\n         completed: !allCompleted,\n"
                },
                {
                    "date": 1715352010283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n \n     setTodos(prev =>\n       prev.map(todo => ({\n         ...todo,\n-        completed: !allCompleted,\n+        completed: new,\n       })),\n     );\n   };\n \n"
                },
                {
                    "date": 1715352017975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n \n     setTodos(prev =>\n       prev.map(todo => ({\n         ...todo,\n-        completed: new,\n+        completed: !allCompleted,\n       })),\n     );\n   };\n \n"
                },
                {
                    "date": 1715352412850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n         setTodos(todosData);\n       } catch (err) {\n         setError(true);\n-        setErrorType('update');\n+        setErrorType('load');\n       }\n     };\n \n     fetchTodos();\n@@ -170,9 +170,8 @@\n   };\n \n   const handleToggleAllTodos = () => {\n     const allCompleted = todos.every(todo => todo.completed);\n-    const newStatus = !allCompleted;\n \n     setTodos(prev =>\n       prev.map(todo => ({\n         ...todo,\n"
                }
            ],
            "date": 1715350240271,
            "name": "Commit-0",
            "content": "/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { UserWarning } from './UserWarning';\nimport { USER_ID, deleteTodo, getTodos, postTodo } from './api/todos';\nimport { TodoList } from './Components/TodoList';\nimport { ErrorNotification } from './Components/ErrorNotification';\nimport { Footer } from './Components/Footer';\nimport { Status, Todo, Error } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [error, setError] = useState<boolean>(false);\n  const [errorType, setErrorType] = useState<Error | null>(null);\n  const [filter, setFilter] = useState<Status>('all');\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [focus, setFocus] = useState<boolean>(true);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [loadingTodoId, setLoadingTodoId] = useState<number | null>(null);\n  const [addNewTodo, setAddNewTodo] = useState<boolean>(false);\n  const [loadingAddTodoId, setLoadingAddTodoId] = useState<number | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [deleteFewTodo, setDeleteFewTodo] = useState<number[]>([]);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const todosData = await getTodos();\n\n        setTodos(todosData);\n      } catch (err) {\n        setError(true);\n        setErrorType('load');\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  useEffect(() => {\n    if (focus) {\n      const inputField = document.querySelector(\n        '.todoapp__new-todo',\n      ) as HTMLElement;\n\n      if (inputField) {\n        inputField.focus();\n      }\n    }\n  }, [focus]);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  const handleKeyDown = async (\n    event: React.KeyboardEvent<HTMLInputElement>,\n  ) => {\n    const trimmedTodo = newTodoTitle.trim();\n\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      if (trimmedTodo) {\n        setFocus(false);\n\n        try {\n          setAddNewTodo(true);\n\n          const newTodo: Todo = {\n            id: 0,\n            userId: USER_ID,\n            title: trimmedTodo,\n            completed: false,\n          };\n\n          setTempTodo(newTodo);\n\n          const response = await postTodo(newTodo);\n\n          setLoadingAddTodoId(response.id);\n\n          setTodos(prevTodos => [...prevTodos, response]);\n          setNewTodoTitle('');\n          setTempTodo(null);\n          setAddNewTodo(false);\n\n          setLoadingAddTodoId(null);\n          setFocus(true);\n        } catch (err) {\n          setError(true);\n          setErrorType('add');\n          setAddNewTodo(false);\n          setFocus(true);\n        }\n      } else {\n        setError(true);\n        setErrorType('empty');\n        setFocus(true);\n      }\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTodoTitle(event.target.value);\n  };\n\n  const onClearCompleted = async () => {\n    const completedTodos = todos.filter(todo => todo.completed);\n    let errorAll = false;\n\n    for (const todo of completedTodos) {\n      try {\n        await deleteTodo(todo.id);\n        setTodos(prevTodos => prevTodos.filter(t => t.id !== todo.id));\n      } catch (err) {\n        setError(true);\n        setErrorType('delete');\n        errorAll = true;\n      }\n    }\n\n    if (errorAll) {\n      setError(true);\n      setErrorType('delete');\n    }\n\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  const handleFilterChange = (newFilter: Status) => {\n    setFilter(newFilter);\n  };\n\n  const handleDeleteTodo = async (id: number) => {\n    setDeleteFewTodo(prev => [...prev, id]);\n    setLoadingTodoId(id);\n    try {\n      await deleteTodo(id);\n      setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (err) {\n      setError(true);\n      setErrorType('delete');\n    } finally {\n      setDeleteFewTodo(prev => prev.filter(todoId => todoId !== id));\n      setLoadingTodoId(null);\n    }\n  };\n\n  const handleToggleTodo = async (id: number) => {\n    setLoadingTodoId(id);\n    try {\n      setTodos(prev =>\n        prev.map(todo =>\n          todo.id === id ? { ...todo, completed: !todo.completed } : todo,\n        ),\n      );\n      await deleteTodo(id);\n      setLoadingTodoId(null);\n    } catch (err) {\n      setError(true);\n      setErrorType('delete');\n    }\n  };\n\n  const handleToggleAllTodos = () => {\n    const allCompleted = todos.every(todo => todo.completed);\n\n    setTodos(prev =>\n      prev.map(todo => ({\n        ...todo,\n        completed: !allCompleted,\n      })),\n    );\n  };\n\n  const hideError = () => {\n    setError(false);\n  };\n\n  return (\n    <div className=\"todoapp\">\n      {!USER_ID && <UserWarning />}\n      <h1 className=\"todoapp__title\">todos</h1>\n      {USER_ID && (\n        <div className=\"todoapp__content\">\n          <header className=\"todoapp__header\">\n            {/* this button should have `active` class only if all todos are completed */}\n            <button\n              type=\"button\"\n              className={`todoapp__toggle-all ${todos.every(todo => todo.completed) ? 'active' : ''}`}\n              data-cy=\"ToggleAllButton\"\n              onClick={handleToggleAllTodos}\n            />\n\n            {/* Add a todo on form submit */}\n            <form>\n              <input\n                ref={inputRef}\n                data-cy=\"NewTodoField\"\n                type=\"text\"\n                className=\"todoapp__new-todo\"\n                placeholder=\"What needs to be done?\"\n                onKeyDown={handleKeyDown}\n                value={newTodoTitle}\n                onChange={handleChange}\n                autoFocus\n                disabled={!focus}\n              />\n            </form>\n          </header>\n          <TodoList\n            todos={todos}\n            onToggleTodo={handleToggleTodo}\n            filter={filter}\n            loading={loading}\n            setError={setError}\n            setErrorType={setErrorType}\n            handleDeleteTodo={handleDeleteTodo}\n            loadingTodoId={loadingTodoId}\n            loadingAddTodoId={loadingAddTodoId}\n            addNewTodo={addNewTodo}\n            setFocus={setFocus}\n            setLoadingTodoId={setLoadingTodoId}\n            tempTodo={tempTodo}\n            setLoading={setLoading}\n            deleteFewTodo={deleteFewTodo}\n          />\n          {/* Hide the footer if there are no todos */}\n          {todos.length > 0 && (\n            <Footer\n              filter={filter}\n              todosCount={todos.length}\n              completedTodosCount={todos.filter(todo => todo.completed).length}\n              onClearCompleted={onClearCompleted}\n              handleFilterChange={handleFilterChange}\n            />\n          )}\n        </div>\n      )}\n      {/* DON'T use conditional rendering to hide the notification */}\n      {/* Add the 'hidden' class to hide the message smoothly */}\n      <ErrorNotification\n        error={error}\n        errorType={errorType}\n        hideError={hideError}\n      />\n    </div>\n  );\n};\n\n"
        }
    ]
}