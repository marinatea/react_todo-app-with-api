{
    "sourceFile": "src/Components/TodoList.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1715349628952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715349640559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import React from 'react';\n+import { Todo } from '../types/Todo';\n+import { TodoItem } from './TodoItem';\n+import { Error } from '../types/Todo';\n+\n+interface Props {\n+  todos: Todo[];\n+  onToggleTodo: (id: number) => void;\n+  filter: string;\n+  loading: boolean;\n+  setError: (setError: boolean) => void;\n+  setErrorType: (setErrorType: Error | null) => void;\n+  handleDeleteTodo: (id: number) => void;\n+  loadingTodoId: number | null;\n+  loadingAddTodoId: number | null;\n+  addNewTodo: boolean;\n+  setFocus: (setFocus: boolean) => void;\n+  setLoadingTodoId: (setLoadingTodoId: number | null) => void;\n+  tempTodo: Todo | null;\n+  setLoading: (setLoading: boolean) => void;\n+  deleteFewTodo: number[];\n+}\n+\n+export const TodoList: React.FC<Props> = ({\n+  todos,\n+  onToggleTodo,\n+  filter,\n+  setError,\n+  setErrorType,\n+  handleDeleteTodo,\n+  loadingTodoId,\n+  loadingAddTodoId,\n+  setFocus,\n+  setLoadingTodoId,\n+  tempTodo,\n+  addNewTodo,\n+  loading,\n+  setLoading,\n+  deleteFewTodo,\n+}) => {\n+  const filteredTodos =\n+    filter === 'active'\n+      ? todos.filter(todo => !todo.completed)\n+      : filter === 'completed'\n+        ? todos.filter(todo => todo.completed)\n+        : todos;\n+\n+  const showLoader = loading && loadingTodoId !== null;\n+\n+  const noTodosMessage =\n+    filter !== 'all' && filteredTodos.length === 0 ? (\n+      <p className=\"todoapp__empty-list-message\"></p>\n+    ) : null;\n+\n+  return (\n+    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n+      {/* This is a completed todo */}\n+      {filteredTodos.map(todo => (\n+        <TodoItem\n+          key={todo.id}\n+          id={todo.id}\n+          title={todo.title}\n+          completed={todo.completed}\n+          onToggle={() => onToggleTodo(todo.id)}\n+          setError={setError}\n+          setErrorType={setErrorType}\n+          onDelete={() => handleDeleteTodo(todo.id)}\n+          loadingTodoId={loadingTodoId}\n+          loadingAddTodoId={loadingAddTodoId}\n+          setFocus={setFocus}\n+          setLoadingTodoId={setLoadingTodoId}\n+          showLoader={showLoader || deleteFewTodo.includes(todo.id)}\n+          setLoading={setLoading}\n+          deleteFewTodo={deleteFewTodo}\n+        />\n+      ))}\n+      {addNewTodo && tempTodo && (\n+        <TodoItem\n+          key={tempTodo.id}\n+          id={tempTodo.id}\n+          title={tempTodo.title}\n+          completed={tempTodo.completed}\n+          onToggle={() => onToggleTodo(tempTodo.id)}\n+          setError={setError}\n+          setErrorType={setErrorType}\n+          onDelete={() => handleDeleteTodo(tempTodo.id)}\n+          loadingTodoId={loadingTodoId}\n+          loadingAddTodoId={loadingAddTodoId}\n+          setFocus={setFocus}\n+          setLoadingTodoId={setLoadingTodoId}\n+          showLoader={true}\n+          setLoading={setLoading}\n+          deleteFewTodo={deleteFewTodo}\n+        />\n+      )}\n+      {noTodosMessage}\n+    </section>\n+  );\n+};\n"
                },
                {
                    "date": 1715349648496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React from 'react';\n import { Todo } from '../types/Todo';\n import { TodoItem } from './TodoItem';\n-import { Error } from '../types/Todo';\n+import { Error } from '../';\n \n interface Props {\n   todos: Todo[];\n   onToggleTodo: (id: number) => void;\n@@ -96,103 +96,4 @@\n       {noTodosMessage}\n     </section>\n   );\n };\n-import React from 'react';\n-import { Todo } from '../types/Todo';\n-import { TodoItem } from './TodoItem';\n-import { Error } from '../types/Todo';\n-\n-interface Props {\n-  todos: Todo[];\n-  onToggleTodo: (id: number) => void;\n-  filter: string;\n-  loading: boolean;\n-  setError: (setError: boolean) => void;\n-  setErrorType: (setErrorType: Error | null) => void;\n-  handleDeleteTodo: (id: number) => void;\n-  loadingTodoId: number | null;\n-  loadingAddTodoId: number | null;\n-  addNewTodo: boolean;\n-  setFocus: (setFocus: boolean) => void;\n-  setLoadingTodoId: (setLoadingTodoId: number | null) => void;\n-  tempTodo: Todo | null;\n-  setLoading: (setLoading: boolean) => void;\n-  deleteFewTodo: number[];\n-}\n-\n-export const TodoList: React.FC<Props> = ({\n-  todos,\n-  onToggleTodo,\n-  filter,\n-  setError,\n-  setErrorType,\n-  handleDeleteTodo,\n-  loadingTodoId,\n-  loadingAddTodoId,\n-  setFocus,\n-  setLoadingTodoId,\n-  tempTodo,\n-  addNewTodo,\n-  loading,\n-  setLoading,\n-  deleteFewTodo,\n-}) => {\n-  const filteredTodos =\n-    filter === 'active'\n-      ? todos.filter(todo => !todo.completed)\n-      : filter === 'completed'\n-        ? todos.filter(todo => todo.completed)\n-        : todos;\n-\n-  const showLoader = loading && loadingTodoId !== null;\n-\n-  const noTodosMessage =\n-    filter !== 'all' && filteredTodos.length === 0 ? (\n-      <p className=\"todoapp__empty-list-message\"></p>\n-    ) : null;\n-\n-  return (\n-    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n-      {/* This is a completed todo */}\n-      {filteredTodos.map(todo => (\n-        <TodoItem\n-          key={todo.id}\n-          id={todo.id}\n-          title={todo.title}\n-          completed={todo.completed}\n-          onToggle={() => onToggleTodo(todo.id)}\n-          setError={setError}\n-          setErrorType={setErrorType}\n-          onDelete={() => handleDeleteTodo(todo.id)}\n-          loadingTodoId={loadingTodoId}\n-          loadingAddTodoId={loadingAddTodoId}\n-          setFocus={setFocus}\n-          setLoadingTodoId={setLoadingTodoId}\n-          showLoader={showLoader || deleteFewTodo.includes(todo.id)}\n-          setLoading={setLoading}\n-          deleteFewTodo={deleteFewTodo}\n-        />\n-      ))}\n-      {addNewTodo && tempTodo && (\n-        <TodoItem\n-          key={tempTodo.id}\n-          id={tempTodo.id}\n-          title={tempTodo.title}\n-          completed={tempTodo.completed}\n-          onToggle={() => onToggleTodo(tempTodo.id)}\n-          setError={setError}\n-          setErrorType={setErrorType}\n-          onDelete={() => handleDeleteTodo(tempTodo.id)}\n-          loadingTodoId={loadingTodoId}\n-          loadingAddTodoId={loadingAddTodoId}\n-          setFocus={setFocus}\n-          setLoadingTodoId={setLoadingTodoId}\n-          showLoader={true}\n-          setLoading={setLoading}\n-          deleteFewTodo={deleteFewTodo}\n-        />\n-      )}\n-      {noTodosMessage}\n-    </section>\n-  );\n-};\n"
                },
                {
                    "date": 1715349665745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React from 'react';\n-import { Todo } from '../types/Todo';\n+import { Todo } from '../';\n import { TodoItem } from './TodoItem';\n-import { Error } from '../';\n+import { Error } from '../Types/Todo';\n \n interface Props {\n   todos: Todo[];\n   onToggleTodo: (id: number) => void;\n"
                }
            ],
            "date": 1715349628952,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './TodoItem';\nimport { Error } from '../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onToggleTodo: (id: number) => void;\n  filter: string;\n  loading: boolean;\n  setError: (setError: boolean) => void;\n  setErrorType: (setErrorType: Error | null) => void;\n  handleDeleteTodo: (id: number) => void;\n  loadingTodoId: number | null;\n  loadingAddTodoId: number | null;\n  addNewTodo: boolean;\n  setFocus: (setFocus: boolean) => void;\n  setLoadingTodoId: (setLoadingTodoId: number | null) => void;\n  tempTodo: Todo | null;\n  setLoading: (setLoading: boolean) => void;\n  deleteFewTodo: number[];\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onToggleTodo,\n  filter,\n  setError,\n  setErrorType,\n  handleDeleteTodo,\n  loadingTodoId,\n  loadingAddTodoId,\n  setFocus,\n  setLoadingTodoId,\n  tempTodo,\n  addNewTodo,\n  loading,\n  setLoading,\n  deleteFewTodo,\n}) => {\n  const filteredTodos =\n    filter === 'active'\n      ? todos.filter(todo => !todo.completed)\n      : filter === 'completed'\n        ? todos.filter(todo => todo.completed)\n        : todos;\n\n  const showLoader = loading && loadingTodoId !== null;\n\n  const noTodosMessage =\n    filter !== 'all' && filteredTodos.length === 0 ? (\n      <p className=\"todoapp__empty-list-message\"></p>\n    ) : null;\n\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n      {/* This is a completed todo */}\n      {filteredTodos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          id={todo.id}\n          title={todo.title}\n          completed={todo.completed}\n          onToggle={() => onToggleTodo(todo.id)}\n          setError={setError}\n          setErrorType={setErrorType}\n          onDelete={() => handleDeleteTodo(todo.id)}\n          loadingTodoId={loadingTodoId}\n          loadingAddTodoId={loadingAddTodoId}\n          setFocus={setFocus}\n          setLoadingTodoId={setLoadingTodoId}\n          showLoader={showLoader || deleteFewTodo.includes(todo.id)}\n          setLoading={setLoading}\n          deleteFewTodo={deleteFewTodo}\n        />\n      ))}\n      {addNewTodo && tempTodo && (\n        <TodoItem\n          key={tempTodo.id}\n          id={tempTodo.id}\n          title={tempTodo.title}\n          completed={tempTodo.completed}\n          onToggle={() => onToggleTodo(tempTodo.id)}\n          setError={setError}\n          setErrorType={setErrorType}\n          onDelete={() => handleDeleteTodo(tempTodo.id)}\n          loadingTodoId={loadingTodoId}\n          loadingAddTodoId={loadingAddTodoId}\n          setFocus={setFocus}\n          setLoadingTodoId={setLoadingTodoId}\n          showLoader={true}\n          setLoading={setLoading}\n          deleteFewTodo={deleteFewTodo}\n        />\n      )}\n      {noTodosMessage}\n    </section>\n  );\n};\n"
        }
    ]
}